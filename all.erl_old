%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(all).      
    
 
-export([start/1
	]).

%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------

start([_ClusterSpec,_HostSpec])->
    io:format("Start ~p~n",[{?MODULE,?FUNCTION_NAME}]),
    
    ok=setup(),
    
    
    io:format("Stop OK !!! ~p~n",[{?MODULE,?FUNCTION_NAME}]),
    timer:sleep(2000),
   init:stop(),
    ok.


%%--------------------------------------------------------------------
%% @doc
%% @spec
%% @end
%%--------------------------------------------------------------------


%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
-define(NodeNames,["n1","n2","n3"]).


setup()->
    io:format("Start ~p~n",[{?MODULE,?FUNCTION_NAME}]),
    {ok,HostName}=inet:gethostname(),
    AllNodes=[{Name,list_to_atom(Name++"@"++HostName)}||Name<-?NodeNames],
    [rpc:call(N,init,stop,[],3000)||{_,N}<-AllNodes],
    []=[{error,NodeName}||{NodeName,Node}<-AllNodes,
	{ok,Node}=:=slave:start(HostName,NodeName)],
    [{error,Node}||{_,Node}<-AllNodes,
       true=:=rpc:call(Node,code,add_patha,["ebin"],5000)],
    
    io:format("nodes ~p~n",[{nodes(),?MODULE,?LINE,?FUNCTION_NAME}]),
    
    ok.
